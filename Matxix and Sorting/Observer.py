from re import X
from tkinter import Y
import cdd as pcdd
import os
import serial  
import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from multiprocessing import Process, Manager
import numpy as np
import math

fig = plt.figure()
X_Grid = [0, 900]
Y_Grid = [0, 900]
Z_Grid = [0, 900]
ax = plt.axes(projection='3d')
ax.set_xlabel('X-Achse')
ax.set_ylabel('Y-Achse')
ax.set_zlabel('Z-Achse')
ax.set_title('3 d-Projection')
name = np.random.default_rng(int(time.time()))
file = open(str('Out\\' + str(name.random()) + '.dat'), "w")


def Sammle_Datei():
    Roh_Daten = []
    Echte_Daten = []
    bab = 'asd'
    # ser = serial.Serial(port="COM4", baudrate=9600)
    # time.sleep(4)
    # ser.write(bab.encode('ascii'))
    # while 1:  # 577-1=576
    #     b = ser.readline().decode('ascii')[:-2]
    #     if b == "Fertig" or b[:2] == ['70', '355']:
    #         break
    #     if b == "Überhitzung":
    #         print("Überhitzung!!")
    #     Roh_Daten.append(b)
    #     print(b)
    Roh_Daten = ["0 0 41", "0 5 40", "0 10 49", "0 15 55", "0 20 64", "0 25 66", "0 30 54", "0 35 56", "0 45 99", "0 50 104", "0 65 84", "0 70 85", "0 75 76", "0 80 72", "0 85 68", "0 90 63", "0 95 58", "0 100 53", "0 105 52", "0 110 51", "0 115 48", "0 120 48", "0 125 49", "0 130 40", "0 135 38", "0 140 39", "0 145 33", "0 150 36", "0 155 36", "0 160 38", "0 180 44", "0 185 53", "0 190 52", "0 195 52", "0 200 61", "0 205 51", "0 210 51", "0 215 48", "0 220 59", "0 225 121", "0 230 152", "0 235 178", "0 240 197", "0 245 197", "0 250 216", "0 255 215", "0 260 216", "0 325 136", "0 330 130", "0 335 135", "0 340 143", "0 345 128", "0 350 77", "0 355 72", "10 5 60", "10 10 78", "10 15 95", "10 20 87", "10 25 98", "10 30 107", "10 35 109", "10 40 111", "10 45 116", "10 50 117", "10 65 102", "10 70 93", "10 75 79", "10 80 70", "10 85 69", "10 90 66", "10 95 59", "10 100 56", "10 105 56", "10 110 53", "10 115 52", "10 120 49", "10 125 49", "10 130 51", "10 135 53", "10 140 42", "10 145 34", "10 150 35", "10 155 37", "10 160 40", "10 165 37", "10 170 36", "10 180 50", "10 185 64", "10 190 97", "10 195 129", "10 200 130", "10 205 165", "10 210 168", "10 215 166", "10 220 166", "10 225 169", "10 230 169", "10 235 174", "10 240 189", "10 245 195", "10 250 204", "10 255 219", "10 260 229", "10 340 122", "10 345 124", "10 350 84", "10 355 82", "20 0 73", "20 5 83", "20 10 85", "20 15 87", "20 20 119", "20 25 112", "20 30 64", "20 35 113", "20 40 115", "20 45 118", "20 50 124", "20 55 127", "20 60 129", "20 65 99", "20 70 101", "20 75 93", "20 80 93", "20 85 80", "20 90 74", "20 95 65", "20 100 62", "20 105 58", "20 110 55", "20 115 54", "20 120 53", "20 125 51", "20 130 52", "20 135 40", "20 140 38", "20 145 40", "20 150 40", "20 155 47", "20 160 53", "20 165 58", "20 170 61", "20 180 60", "20 185 92", "20 190 117", "20 195 142", "20 200 174", "20 205 173", "20 210 172", "20 215 170", "20 220 171", "20 225 172", "20 235 175", "20 240 200", "20 250 218", "20 255 220", "20 260 227", "20 265 246", "20 340 211", "20 345 128", "20 355 145", "30 0 88", "30 5 86", "30 10 100", "30 20 127", "30 30 124", "30 35 124", "30 40 124", "30 45 126", "30 50 127", "30 55 131", "30 60 130", "30 65 132", "30 70 108", "30 75 101", "30 80 89", "30 85 85", "30 90 81", "30 95 75", "30 100 70", "30 105 68", "30 110 66", "30 115 65", "30 120 54", "30 125 54", "30 130 54", "30 135 55", "30 140 46", "30 145 50", "30 150 53", "30 155 53", "30 165 70", "30 170 80", "30 175 84", "30 180 109", "30 185 115", "30 190 126", "30 200 184", "30 205 183", "30 210 180", "30 215 180", "30 225 181", "30 230 184", "30 235 185", "30 240 210", "30 245 211", "30 250 224", "30 255 235", "30 260 240", "30 345 194", "30 350 180", "30 355 175", "40 0 172", "40 10 123", "40 15 129", "40 20 136", "40 25 135", "40 30 133", "40 35 132", "40 40 132", "40 45 135", "40 50 138", "40 55 141", "40 60 144", "40 65 134", "40 70 116", "40 75 106", "40 80 97", "40 85 88", "40 90 88", "40 95 80", "40 100 77", "40 105 74", "40 110 72", "40 115 70", "40 120 69", "40 125 70", "40 135 65", "40 140 62", "40 145 62", "40 155 71", "40 160 76", "40 165 80", "40 170 84", "40 175 104", "40 180 115", "40 185 123", "40 190 130", "40 195 171", "40 200 199", "40 205 199", "40 215 195", "40 220 194", "40 225 195", "40 230 198", "40 235 208", "40 240 221", "40 245 229", "40 250 243", "50 70 103", "40 255 243", "50 90 86", "50 100 91", "50 105 78", "50 110 98", "50 115 95", "50 120 100", "50 125 105", "50 130 103", "50 135 80", "50 140 86", "50 145 94", "50 150 91", "50 155 94", "40 340 235", "50 160 102", "40 345 205", "40 350 206", "40 355 193", "50 0 174", "50 5 161", "50 15 152", "50 20 152", "50 25 149", "50 30 149", "50 40 148", "50 45 150", "50 50 154", "50 55 159", "50 60 147", "50 65 148", "50 70 103", "50 75 103", "50 80 102", "50 85 99", "50 90 93", "50 95 87", "50 100 81", "50 105 77", "50 110 78", "50 115 78", "50 120 76", "50 125 76", "50 135 71", "50 140 68", "50 145 70", "50 150 73", "50 155 76", "50 160 83", "50 165 86", "50 175 110", "50 180 147", "50 185 144", "50 190 158", "50 195 220", "50 200 232", "40 20 103", "50 210 224", "50 215 218", "50 220 218", "50 225 219", "50 230 223", "50 235 229", "50 240 243", "40 60 93", "50 245 246", "40 65 105", "40 70 98", "40 75 84", "50 260 247", "40 80 75", "50 265 247", "40 85 77", "40 90 70", "40 95 65", "40 100 72", "40 105 69", "40 110 69", "40 115 68", "40 120 69", "40 125 69", "40 130 73", "40 135 61", "40 140 62", "40 145 66", "40 150 74", "40 155 79", "40 160 83", "50 345 224", "40 165 88", "50 350 210", "40 170 94", "50 355 189", "60 0 189", "60 5 176", "60 10 173", "60 20 174", "60 25 175", "60 30 176", "60 35 176", "60 40 177", "60 45 180", "60 55 190", "60 60 184", "60 65 160", "60 70 106", "60 75 99", "60 80 97", "60 85 95", "60 90 92", "60 95 91", "60 100 91", "60 105 90", "60 110 90", "60 115 90", "60 120 89", "60 125 89", "60 130 87", "60 140 80", "60 145 82", "60 150 88", "60 155 91", "60 160 101", "60 165 105", "60 170 115", "60 175 146", "60 180 161", "60 185 161", "60 190 191", "60 195 214", "60 200 226", "60 210 228", "60 215 228", "60 220 228", "60 225 227", "60 230 226", "60 235 226", "60 240 228", "60 245 225", "60 250 223", "30 70 102", "60 255 223", "60 260 223", "30 80 84", "60 265 222", "30 85 90", "60 270 222", "30 90 82", "60 275 221", "30 95 80", "60 280 221", "30 100 76", "60 285 221", "30 105 73", "60 290 221", "30 110 70", "60 295 220", "30 115 72", "60 300 222", "30 120 75", "60 305 222", "30 125 70", "60 310 222", "30 130 70", "60 315 222", "30 135 66", "60 320 222", "30 140 63", "60 325 222", "30 145 64", "60 330 222", "30 150 67", "60 335 222", "30 155 70", "60 340 219", "30 160 72", "60 345 216", "30 165 78", "60 350 214", "30 170 83", "60 355 214", "30 175 88", "70 0 208", "20 180 100", "70 5 196", "70 10 197", "20 190 102", "70 20 200", "70 25 201", "70 30 204", "70 35 202", "70 40 204", "70 45 206", "70 50 206", "70 55 207", "70 60 198", "70 65 187", "70 70 163", "70 80 107", "70 90 85", "70 95 85", "70 100 86", "70 105 91", "70 110 100", "70 115 99", "70 120 100", "70 125 100", "70 130 98", "70 135 93", "70 150 101", "70 155 103", "70 160 110", "70 165 118", "70 175 160", "70 180 118", "20 0 103", "70 185 180", "20 5 44", "70 190 196", "20 10 73", "70 195 206", "70 200 210", "70 210 212", "70 215 212", "70 220 211", "70 225 211", "70 230 210", "70 235 210", "70 240 211", "70 245 208", "20 65 107", "70 250 208", "70 255 208", "20 75 100", "20 80 89", "70 265 207", "20 85 88", "70 270 144", "20 90 76", "70 275 199", "20 95 75", "20 100 72", "70 285 198", "20 105 68", "70 290 198", "20 110 68", "20 115 65", "70 300 198", "20 120 65", "70 305 198", "20 125 62", "70 310 198", "20 130 65", "70 315 197", "20 135 62", "70 320 197", "20 140 59", "70 325 197", "20 145 58", "70 330 197", "20 150 60", "70 335 197", "20 155 61", "70 340 197", "20 160 65", "70 345 197", "20 165 71", "70 350 198", "20 170 73", "70 355 197", "20 175 78"]
    Roh_Daten.sort()
    for Data1 in Roh_Daten:
        faktor = False
        Axe1 = Data1.split()[:2]
        Abstand1 = Data1.split()[2]
        for Data2 in Roh_Daten:
            Axe2 = Data2.split()[:2]
            Abstand2 = Data2.split()[2]
            if Axe1 == Axe2 and Abstand1 != Abstand2:
                Final_Abstand = (int(Abstand1) + int(Abstand2))/2
                Echte_Daten.append(
                    str(Axe1[0] + " " + Axe1[1] + " " + str(Final_Abstand)))
                faktor = True
                Roh_Daten.remove(Data1)
                Roh_Daten.remove(Data2)
                print(len(Roh_Daten))
                break
        if faktor == False:
            Echte_Daten.append(
                    str(Axe1[0] + " " + str(Axe1[1]) + " " + str(Abstand1)))
            print(str(Axe1[0] + " " + str(Axe1[1]) + " " + str(Abstand1)))
            Roh_Daten.remove(Data1)
        else:
            continue

            
    return Echte_Daten


def Messen(Punkt_Data):
    x_list = []
    y_list = []
    z_list = []
    Daten_list = []
    Hull_list = []
    for Data in Punkt_Data:
        Höhe = Data.split()[0]
        Azimut = Data.split()[1]
        Abstand = Data.split()[2]
        vi = abs(math.cos(math.degrees(int(Höhe))) * float(Abstand))
        vx = abs(math.cos(math.degrees(int(Azimut))) * vi)
        vy = abs(math.sin(math.degrees(int(Azimut))) * vi)
        vz = abs(math.sin(math.degrees(int(Höhe))) * float(Abstand))
        if int(Azimut) > 90 and int(Azimut) < 270:
            v1 = -1
        else:
            v1 = 1
        if int(Azimut) > 180:
            v2 = -1
        else:
            v2 = 1
        X = 450 + (vx * v1)
        Y = 450 + (vy * v2)
        x_list.append(X)
        y_list.append(Y)
        z_list.append(vz)
        list1 = [int(X), int(Y), int(vz)]
        Hull_list.append(list1)
        Daten_list.append(str(X) + ', ' + str(Y) + ', ' + str(vz) + '\n')
        # print(str(X) + ', ' + str(Y) + ', ' + str(vz) + '\n')
    # x_list.append(450)
    # y_list.append(450)
    # z_list.append(0)
    return x_list, y_list, z_list, Daten_list, Hull_list


Echte_Daten = Sammle_Datei()
cx_list, cy_list, cz_list, cDaten_list, Hull_list = Messen(Echte_Daten)
print(np.array(Hull_list))
vertices = np.hstack((np.ones((len(cy_list),1)), Hull_list))
mat = pcdd.Matrix(vertices, linear=False, number_type="fraction") 
mat.rep_type = pcdd.RepType.GENERATOR
poly = pcdd.Polyhedron(mat)
adjacencies = [list(x) for x in poly.get_input_adjacency()]
edges = [None]*(len(cy_list)-1)
for i,indices in enumerate(adjacencies[:-1]):
    indices = list(filter(lambda x: x>i, indices))
    l = len(indices)
    col1 = np.full((l, 1), i)
    indices = np.reshape(indices, (l, 1))
    edges[i] = np.hstack((col1, indices))
Edges = np.vstack(tuple(edges))
ax = fig.add_subplot(111, projection="3d")

start = np.array(Hull_list)[Edges[:,0].astype(int)].astype(int)
end = np.array(Hull_list)[Edges[:,1].astype(int)].astype(int)

for i in range(len(start)):
    ax.plot(
        [start[i,0], end[i,0]], 
        [start[i,1], end[i,1]], 
        [start[i,2], end[i,2]],
        "grey"
    )
file.writelines(cDaten_list)
ax.scatter(cx_list, cy_list, cz_list, c=np.linalg.norm(
    [cx_list, cy_list, cz_list], axis=0))
#ax.plot_trisurf(np.array(cx_list), np.array(cy_list), np.array(cz_list))
ax.view_init(60, 35)
file.close()
plt.savefig(str('Out\\' + str(name.random()) + '.png'))
plt.show()